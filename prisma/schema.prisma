generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id       Int    @id @default(autoincrement())
  crowdId  String
  role     Role   @relation(fields: [roleId], references: [id])
  roleId   Int
  password String

  created_at DateTime    @default(now())
  updated_at DateTime    @default(now()) @updatedAt
  microtaskResults  MicrotaskResult[]
  document   Document[]

  @@map("users")
}

enum RoleKind {
  WRITER
  WORKER
  ADMIN
}

model Role {
  id    Int      @id @default(autoincrement())
  kind  RoleKind @unique
  users User[]

  @@map("roles")
}

model Document {
  id              Int         @id @default(autoincrement())
  title           String
  // should be lexical replesantation
  body            String
  isRebuttalReady Boolean     @default(false)
  author          User        @relation(fields: [authorId], references: [id])
  authorId        Int
  paragrahs       Paragraph[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("documents")
}

enum SentenceKind {
  OPINION
  FACT
  NONE
}

model Sentence {
  id   Int          @id @default(autoincrement())
  body String
  kind SentenceKind @default(NONE)

  paragraph   Paragraph @relation(fields: [paragraphId], references: [id])
  paragraphId Int
  microtasks Microtask[]

  @@map("sentences")
}

model Paragraph {
  id         Int         @id @default(autoincrement())
  body       String
  document   Document    @relation(fields: [documentId], references: [id])
  documentId Int
  microtasks Microtask[]
  sentences  Sentence[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("paragrahs")
}

enum MicrotaskKinds {
  DISTINGUISH_OPINION_AND_FACT
  CHECK_FACT_RESOURCE
  CHECK_IF_OPINION_HAS_VALID_FACT
  REVIEW_OTHER_WORKERS_RESULT
}

// センテンスとパラグラフを一意に特定できるモデル
model Microtask {
  id               Int               @id @default(autoincrement())
  title            String
  body             String
  kind             MicrotaskKinds
  paragraph        Paragraph         @relation(fields: [paragraphId], references: [id])
  paragraphId      Int
  sentence         Sentence          @relation(fields: [sentenceId], references: [id])
  sentenceId       Int
  microtaskResults MicrotaskResult[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("microtasks")
}
enum Executor {
  WORKER
  SYSTEM
}

model MicrotaskResult {
  id          Int       @id @default(autoincrement())
  // MTask1: OPINION or FACT
  // MTask2/3: TRUE or FALSE (as string)
  value       String
  reason      String?
  executor    Executor  @default(WORKER)
  microtask   Microtask @relation(fields: [microtaskId], references: [id])
  microtaskId Int
  assignee      User             @relation(fields: [assigneeId], references: [id])
  assigneeId    Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  @@map("microtask_results")
}

