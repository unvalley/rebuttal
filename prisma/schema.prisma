generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id       Int    @id @default(autoincrement())
  crowdId  String
  role     Role   @relation(fields: [roleId], references: [id])
  roleId   Int
  password String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  document  Document[]

  @@map("users")
}

enum RoleKind {
  WRITER
  WORKER
  ADMIN
}

model Role {
  id    Int      @id @default(autoincrement())
  kind  RoleKind @unique
  users User[]

  @@map("roles")
}

model Document {
  id        Int         @id @default(autoincrement())
  title     String
  // should be lexical replesantation
  body      String
  author    User        @relation(fields: [authorId], references: [id])
  authorId  Int
  paragrahs Paragraph[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("documents")
}

// タスクで表示するのはパラグラフごとだが，センテンスに対する結果が必要
model Sentence {
  id              Int               @id @default(autoincrement())
  body            String
  paragraph       Paragraph         @relation(fields: [paragraphId], references: [id])
  paragraphId     Int
  microtaskResult MicrotaskResult[]

  @@map("sentences")
}

model Paragraph {
  id         Int         @id @default(autoincrement())
  body       String
  document   Document    @relation(fields: [documentId], references: [id])
  documentId Int
  microtasks Microtask[]
  sentences  Sentence[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("paragrahs")
}

enum MicrotaskKinds {
  CHECK_OP_OR_FACT
  CHECK_FACT_RESOURCE
  CHECK_OPINION_VALIDNESS
}

// センテンスとパラグラフを一意に特定できるモデル
model Microtask {
  id          Int            @id @default(autoincrement())
  title       String
  body        String
  kind        MicrotaskKinds
  paragraph   Paragraph      @relation(fields: [paragraphId], references: [id])
  paragraphId Int

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  microtaskResult MicrotaskResult[]

  @@map("microtasks")
}

model MicrotaskResult {
  id     Int     @id @default(autoincrement())
  // MTask1: OPINION or FACT, MTask2/3: TRUE or FALSE (as string)
  value  String
  // MTask1 : NULL, MTask2/3: the reason
  reason String?

  microtask   Microtask @relation(fields: [microtaskId], references: [id])
  microtaskId Int

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  sentence   Sentence @relation(fields: [sentenceId], references: [id])
  sentenceId Int

  @@map("microtask_results")
}
